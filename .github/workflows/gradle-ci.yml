name: Java CI with Gradle

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-22.04  # Используем Ubuntu 22.04

    steps:
      # Проверка репозитория
      - name: Check out code
        uses: actions/checkout@v3

      # Установка JDK 17
      - name: Set up Amazon Corretto 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # Кэширование зависимостей Gradle
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Разрешение прав на выполнение для gradlew
      - name: Grant execute permission to gradlew
        run: |
          chmod +x ./sports-admin/gradlew
          chmod +x ./sports-config/gradlew 
          chmod +x ./sports-discovery/gradlew
          chmod +x ./sports-file/gradlew
          chmod +x ./sports-gateway/gradlew
          chmod +x ./sports-notification/gradlew
          chmod +x ./sports-order/gradlew
          chmod +x ./sports-fight/gradlew
          chmod +x ./sports-user/gradlew

      # Выполнение сборки Gradle без тестов
      - name: Build with Gradle (skip tests)
        run: |
          cd ./sports-admin && ./gradlew build -x test --no-daemon
          cd ../sports-config && ./gradlew build -x test --no-daemon
          cd ../sports-discovery && ./gradlew build -x test --no-daemon
          cd ../sports-file && ./gradlew build -x test --no-daemon
          cd ../sports-gateway && ./gradlew build -x test --no-daemon
          cd ../sports-notification && ./gradlew build -x test --no-daemon
          cd ../sports-order && ./gradlew build -x test --no-daemon
          cd ../sports-fight && ./gradlew build -x test --no-daemon
          cd ../sports-user && ./gradlew build -x test --no-daemon

  test:
    runs-on: ubuntu-22.04
    needs: build  # Запуск тестов после успешной сборки

    steps:
      # Проверка репозитория
      - name: Check out code
        uses: actions/checkout@v3

      # Установка JDK 17
      - name: Set up Amazon Corretto 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # Разрешение прав на выполнение для gradlew
      - name: Grant execute permission to gradlew
        run: |
          chmod +x ./sports-admin/gradlew
          chmod +x ./sports-config/gradlew 
          chmod +x ./sports-discovery/gradlew
          chmod +x ./sports-file/gradlew
          chmod +x ./sports-gateway/gradlew
          chmod +x ./sports-notification/gradlew
          chmod +x ./sports-order/gradlew
          chmod +x ./sports-fight/gradlew
          chmod +x ./sports-user/gradlew

      # Выполнение тестов Gradle
      - name: Run Tests with Gradle
        run: |
          cd ./sports-admin && ./gradlew test --no-daemon
          cd ../sports-config && ./gradlew test --no-daemon
          cd ../sports-discovery && ./gradlew test --no-daemon
          cd ../sports-file && ./gradlew test --no-daemon
          cd ../sports-gateway && ./gradlew test --no-daemon
          cd ../sports-notification && ./gradlew test --no-daemon
          cd ../sports-order && ./gradlew test --no-daemon
          cd ../sports-fight && ./gradlew test --no-daemon
          cd ../sports-user && ./gradlew test --no-daemon

  docker:
    runs-on: ubuntu-22.04
    needs: test  # Публикация образа только после успешных тестов

    steps:
      # Проверка репозитория
      - name: Check out code
        uses: actions/checkout@v3

      # Логин в Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Сборка и публикация Docker образов для всех микросервисов
      - name: Build and Push Docker Images
        run: |
          for service in sports-admin sports-config sports-discovery sports-file sports-gateway sports-notification sports-order sports-fight sports-user; do
            echo "Building and pushing image for $service"
            docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}:$service-latest ./$service
            docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}:$service-latest
          done